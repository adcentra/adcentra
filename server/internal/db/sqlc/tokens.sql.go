// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: tokens.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const deleteAllForUser = `-- name: DeleteAllForUser :exec
DELETE FROM tokens
WHERE scope = $1 AND user_id = $2
`

type DeleteAllForUserParams struct {
	Scope  string
	UserID int64
}

func (q *Queries) DeleteAllForUser(ctx context.Context, arg DeleteAllForUserParams) error {
	_, err := q.db.Exec(ctx, deleteAllForUser, arg.Scope, arg.UserID)
	return err
}

const deleteAllForUserExceptHash = `-- name: DeleteAllForUserExceptHash :exec
DELETE FROM tokens
WHERE scope = $1 AND user_id = $2 AND hash != $3
`

type DeleteAllForUserExceptHashParams struct {
	Scope  string
	UserID int64
	Hash   []byte
}

func (q *Queries) DeleteAllForUserExceptHash(ctx context.Context, arg DeleteAllForUserExceptHashParams) error {
	_, err := q.db.Exec(ctx, deleteAllForUserExceptHash, arg.Scope, arg.UserID, arg.Hash)
	return err
}

const deleteByHash = `-- name: DeleteByHash :exec
DELETE FROM tokens
WHERE hash = $1
`

func (q *Queries) DeleteByHash(ctx context.Context, hash []byte) error {
	_, err := q.db.Exec(ctx, deleteByHash, hash)
	return err
}

const deleteExpiredTokens = `-- name: DeleteExpiredTokens :exec
DELETE FROM tokens
WHERE expiry < NOW()
`

func (q *Queries) DeleteExpiredTokens(ctx context.Context) error {
	_, err := q.db.Exec(ctx, deleteExpiredTokens)
	return err
}

const insertToken = `-- name: InsertToken :one
INSERT INTO tokens (hash, user_id, expiry, scope)
VALUES ($1, $2, $3, $4)
RETURNING hash, user_id, expiry, scope, created_at, updated_at
`

type InsertTokenParams struct {
	Hash   []byte
	UserID int64
	Expiry pgtype.Timestamptz
	Scope  string
}

func (q *Queries) InsertToken(ctx context.Context, arg InsertTokenParams) (Token, error) {
	row := q.db.QueryRow(ctx, insertToken,
		arg.Hash,
		arg.UserID,
		arg.Expiry,
		arg.Scope,
	)
	var i Token
	err := row.Scan(
		&i.Hash,
		&i.UserID,
		&i.Expiry,
		&i.Scope,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
