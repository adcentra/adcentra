// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: roles.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgconn"
)

const addRolesForUser = `-- name: AddRolesForUser :exec
INSERT INTO user_roles (user_id, role_id)
SELECT $1, roles.id FROM roles WHERE roles.code = ANY($2::text[])
`

type AddRolesForUserParams struct {
	UserID    int64
	RoleCodes []string
}

func (q *Queries) AddRolesForUser(ctx context.Context, arg AddRolesForUserParams) error {
	_, err := q.db.Exec(ctx, addRolesForUser, arg.UserID, arg.RoleCodes)
	return err
}

const createRoles = `-- name: CreateRoles :exec
INSERT INTO roles (code)
SELECT UNNEST($1::text[])
ON CONFLICT DO NOTHING
`

func (q *Queries) CreateRoles(ctx context.Context, roleCodes []string) error {
	_, err := q.db.Exec(ctx, createRoles, roleCodes)
	return err
}

const getAllRolesForUser = `-- name: GetAllRolesForUser :many
SELECT DISTINCT r.code
FROM roles r
INNER JOIN user_roles ur ON r.id = ur.role_id
WHERE ur.user_id = $1
`

func (q *Queries) GetAllRolesForUser(ctx context.Context, userID int64) ([]string, error) {
	rows, err := q.db.Query(ctx, getAllRolesForUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var code string
		if err := rows.Scan(&code); err != nil {
			return nil, err
		}
		items = append(items, code)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeRolesForUser = `-- name: RemoveRolesForUser :execresult
DELETE FROM user_roles
WHERE user_id = $1 AND role_id = ANY(
  SELECT id FROM roles WHERE code = ANY($2::text[])
)
`

type RemoveRolesForUserParams struct {
	UserID    int64
	RoleCodes []string
}

func (q *Queries) RemoveRolesForUser(ctx context.Context, arg RemoveRolesForUserParams) (pgconn.CommandTag, error) {
	return q.db.Exec(ctx, removeRolesForUser, arg.UserID, arg.RoleCodes)
}

const roleExists = `-- name: RoleExists :one
SELECT EXISTS(
  SELECT 1 FROM roles WHERE code = $1
)
`

func (q *Queries) RoleExists(ctx context.Context, code string) (bool, error) {
	row := q.db.QueryRow(ctx, roleExists, code)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}
