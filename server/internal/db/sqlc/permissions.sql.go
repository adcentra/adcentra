// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: permissions.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgconn"
)

const addPermissionsForRole = `-- name: AddPermissionsForRole :exec
INSERT INTO role_permissions (role_id, permission_id)
SELECT roles.id, permissions.id
FROM roles, permissions
WHERE roles.code = $1 AND permissions.code = ANY($2::text[])
ON CONFLICT DO NOTHING
`

type AddPermissionsForRoleParams struct {
	RoleCode  string
	PermCodes []string
}

func (q *Queries) AddPermissionsForRole(ctx context.Context, arg AddPermissionsForRoleParams) error {
	_, err := q.db.Exec(ctx, addPermissionsForRole, arg.RoleCode, arg.PermCodes)
	return err
}

const create = `-- name: Create :exec
INSERT INTO permissions (code)
SELECT UNNEST($1::text[])
ON CONFLICT DO NOTHING
`

func (q *Queries) Create(ctx context.Context, dollar_1 []string) error {
	_, err := q.db.Exec(ctx, create, dollar_1)
	return err
}

const getAllPermissionsForRole = `-- name: GetAllPermissionsForRole :many
SELECT p.code
FROM permissions p
INNER JOIN role_permissions rp ON rp.permission_id = p.id
WHERE rp.role_id = $1
`

func (q *Queries) GetAllPermissionsForRole(ctx context.Context, roleID int64) ([]string, error) {
	rows, err := q.db.Query(ctx, getAllPermissionsForRole, roleID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var code string
		if err := rows.Scan(&code); err != nil {
			return nil, err
		}
		items = append(items, code)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllPermissionsForUser = `-- name: GetAllPermissionsForUser :many
SELECT DISTINCT p.code
FROM permissions p
INNER JOIN role_permissions rp ON p.id = rp.permission_id
INNER JOIN user_roles ur ON rp.role_id = ur.role_id
WHERE ur.user_id = $1
`

func (q *Queries) GetAllPermissionsForUser(ctx context.Context, userID int64) ([]string, error) {
	rows, err := q.db.Query(ctx, getAllPermissionsForUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var code string
		if err := rows.Scan(&code); err != nil {
			return nil, err
		}
		items = append(items, code)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removePermissionsForRole = `-- name: RemovePermissionsForRole :execresult
DELETE FROM role_permissions
WHERE (role_id, permission_id) IN (
  SELECT roles.id, permissions.id
  FROM roles, permissions
  WHERE roles.code = $1 AND permissions.code = ANY($2::text[])
)
`

type RemovePermissionsForRoleParams struct {
	RoleCode  string
	PermCodes []string
}

func (q *Queries) RemovePermissionsForRole(ctx context.Context, arg RemovePermissionsForRoleParams) (pgconn.CommandTag, error) {
	return q.db.Exec(ctx, removePermissionsForRole, arg.RoleCode, arg.PermCodes)
}
