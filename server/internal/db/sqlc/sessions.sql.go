// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: sessions.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getSessionForToken = `-- name: GetSessionForToken :one
SELECT users.id, users.full_name, users.username, users.email, users.password_hash, users.profile_image_url, users.activated, users.last_login_at, users.version, users.created_at, users.updated_at, tokens.hash, tokens.user_id, tokens.expiry, tokens.scope, tokens.created_at, tokens.updated_at
FROM users
INNER JOIN tokens ON users.id = tokens.user_id
WHERE tokens.hash = $1
AND tokens.scope = $2
AND tokens.expiry > $3
`

type GetSessionForTokenParams struct {
	Hash              []byte
	Scope             string
	ExpiryGreaterThan pgtype.Timestamptz
}

type GetSessionForTokenRow struct {
	User  User
	Token Token
}

func (q *Queries) GetSessionForToken(ctx context.Context, arg GetSessionForTokenParams) (GetSessionForTokenRow, error) {
	row := q.db.QueryRow(ctx, getSessionForToken, arg.Hash, arg.Scope, arg.ExpiryGreaterThan)
	var i GetSessionForTokenRow
	err := row.Scan(
		&i.User.ID,
		&i.User.FullName,
		&i.User.Username,
		&i.User.Email,
		&i.User.PasswordHash,
		&i.User.ProfileImageUrl,
		&i.User.Activated,
		&i.User.LastLoginAt,
		&i.User.Version,
		&i.User.CreatedAt,
		&i.User.UpdatedAt,
		&i.Token.Hash,
		&i.Token.UserID,
		&i.Token.Expiry,
		&i.Token.Scope,
		&i.Token.CreatedAt,
		&i.Token.UpdatedAt,
	)
	return i, err
}
